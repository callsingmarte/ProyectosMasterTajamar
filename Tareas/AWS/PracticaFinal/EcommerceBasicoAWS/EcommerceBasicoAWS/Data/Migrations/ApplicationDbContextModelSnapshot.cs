// <auto-generated />
using System;
using EcommerceBasicoAWS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceBasicoAWS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Property<Guid>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCarrito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("bece266a-6d03-45c9-ba1b-a7c74d042b95"),
                            Nombre = "Ropa"
                        },
                        new
                        {
                            IdCategoria = new Guid("2a695474-3627-46a4-bf7d-976f2c2bb4c8"),
                            Nombre = "Calzado"
                        },
                        new
                        {
                            IdCategoria = new Guid("184aa515-ed4a-4d3b-b198-b77fab6db1d7"),
                            Nombre = "Accesorios"
                        },
                        new
                        {
                            IdCategoria = new Guid("54c7b8bd-d646-4be4-bdcf-c5cf11f09083"),
                            Nombre = "Hogar"
                        },
                        new
                        {
                            IdCategoria = new Guid("10e95e20-903b-4cc7-b7ae-9298a86ab4e2"),
                            Nombre = "Libros"
                        },
                        new
                        {
                            IdCategoria = new Guid("1bea9180-34ce-46c7-8f10-b48afe6b7609"),
                            Nombre = "Tecnología"
                        },
                        new
                        {
                            IdCategoria = new Guid("ae8a02ec-0ac1-452d-b248-86d332dedf45"),
                            Nombre = "Electrónica"
                        },
                        new
                        {
                            IdCategoria = new Guid("2551e083-97db-4592-a4bc-3b598150382b"),
                            Nombre = "Deportes"
                        },
                        new
                        {
                            IdCategoria = new Guid("9fa9da00-6885-45c6-96d4-33804713041f"),
                            Nombre = "Belleza"
                        },
                        new
                        {
                            IdCategoria = new Guid("36a0ab87-61c6-4eb8-b752-5c218fba1f3d"),
                            Nombre = "Joyería"
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.Property<Guid>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdPedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesPedidos");

                    b.HasData(
                        new
                        {
                            IdDetalle = new Guid("7591b16b-4484-4f88-99db-1b97a23ee275"),
                            Cantidad = 2,
                            IdPedido = new Guid("240558a7-66ab-49f0-ab30-fc1c69d47384"),
                            IdProducto = new Guid("47c4b2ea-b3b8-4144-a9e5-cb1487d4ef9a"),
                            PrecioUnitario = 19.99m,
                            Subtotal = 39.98m
                        },
                        new
                        {
                            IdDetalle = new Guid("145a96f0-7c56-4179-9bac-a68b8b3acd8a"),
                            Cantidad = 1,
                            IdPedido = new Guid("240558a7-66ab-49f0-ab30-fc1c69d47384"),
                            IdProducto = new Guid("882f3766-47d8-4970-9225-75033be52d8e"),
                            PrecioUnitario = 12.50m,
                            Subtotal = 12.50m
                        },
                        new
                        {
                            IdDetalle = new Guid("c424cadc-fb26-4eff-9e48-49d485f18500"),
                            Cantidad = 1,
                            IdPedido = new Guid("974d6a14-4e82-407c-a3c2-bc0ed663dfcc"),
                            IdProducto = new Guid("0fd457ad-407e-4cd0-9ea3-80b3b014eb4f"),
                            PrecioUnitario = 49.99m,
                            Subtotal = 49.99m
                        },
                        new
                        {
                            IdDetalle = new Guid("49816620-f9e8-458e-8f8d-0c083882bce8"),
                            Cantidad = 1,
                            IdPedido = new Guid("974d6a14-4e82-407c-a3c2-bc0ed663dfcc"),
                            IdProducto = new Guid("1cc7ad5f-1580-48d8-b88e-9f267e563b59"),
                            PrecioUnitario = 69.99m,
                            Subtotal = 69.99m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.Property<Guid>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("principal")
                        .HasColumnType("bit");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direcciones");

                    b.HasData(
                        new
                        {
                            IdDireccion = new Guid("a4811600-ad1b-4fe9-b0c4-7d3fab3a8ba9"),
                            Ciudad = "Madrid",
                            CodigoPostal = 28080,
                            Domicilio = "Avenida Siempreviva 742",
                            IdUsuario = "c2001ba6-7581-4a6c-94d3-80b348bca906",
                            Pais = "España",
                            Provincia = "Madrid",
                            principal = true
                        },
                        new
                        {
                            IdDireccion = new Guid("d7137b33-ff9b-4c8f-a877-c5669fe865c8"),
                            Ciudad = "Barcelona",
                            CodigoPostal = 8001,
                            Domicilio = "Calle de la Piruleta 15",
                            IdUsuario = "c2001ba6-7581-4a6c-94d3-80b348bca906",
                            Pais = "España",
                            Provincia = "Barcelona",
                            principal = false
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.Property<Guid>("IdItemCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCarrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdItemCarrito");

                    b.HasIndex("IdCarrito");

                    b.HasIndex("IdProducto");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.Property<int>("IdMultimedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMultimedia"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMultimedia");

                    b.HasIndex("IdProducto");

                    b.ToTable("MultimediaProductos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDireccion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            IdPedido = new Guid("240558a7-66ab-49f0-ab30-fc1c69d47384"),
                            Estado = "Pendiente",
                            FechaCreacion = new DateTime(2025, 5, 13, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(9894),
                            IdDireccion = new Guid("a4811600-ad1b-4fe9-b0c4-7d3fab3a8ba9"),
                            IdUsuario = "c2001ba6-7581-4a6c-94d3-80b348bca906",
                            Numero = 1,
                            Total = 45.99m
                        },
                        new
                        {
                            IdPedido = new Guid("974d6a14-4e82-407c-a3c2-bc0ed663dfcc"),
                            Estado = "Enviado",
                            FechaCreacion = new DateTime(2025, 5, 9, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(9917),
                            IdDireccion = new Guid("a4811600-ad1b-4fe9-b0c4-7d3fab3a8ba9"),
                            IdUsuario = "c2001ba6-7581-4a6c-94d3-80b348bca906",
                            Numero = 2,
                            Total = 89.50m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Producto", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            IdProducto = new Guid("47c4b2ea-b3b8-4144-a9e5-cb1487d4ef9a"),
                            Descripcion = "Camiseta de manga corta, 100% algodón suave.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7590),
                            FechaCreacion = new DateTime(2025, 4, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7528),
                            Nombre = "Camiseta Básica Algodón",
                            Precio = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            IdProducto = new Guid("0fd457ad-407e-4cd0-9ea3-80b3b014eb4f"),
                            Descripcion = "Pantalón vaquero clásico de corte recto.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7599),
                            FechaCreacion = new DateTime(2025, 3, 15, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7597),
                            Nombre = "Pantalón Vaquero Recto",
                            Precio = 49.99m,
                            Stock = 50
                        },
                        new
                        {
                            IdProducto = new Guid("3cc06c7c-4b28-48b5-aa7a-3bf78b8b9dea"),
                            Descripcion = "Zapatillas cómodas y con estilo para el día a día.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7662),
                            FechaCreacion = new DateTime(2025, 3, 30, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7603),
                            Nombre = "Zapatillas Deportivas Urbanas",
                            Precio = 79.99m,
                            Stock = 75
                        },
                        new
                        {
                            IdProducto = new Guid("88c8aaf4-cd86-4781-92e0-af69dc028ea2"),
                            Descripcion = "Bolso de cuero genuino con múltiples compartimentos.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7687),
                            FechaCreacion = new DateTime(2025, 2, 13, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7685),
                            Nombre = "Bolso de Cuero Grande",
                            Precio = 129.99m,
                            Stock = 20
                        },
                        new
                        {
                            IdProducto = new Guid("6643ce06-d7bc-46f2-bb73-88e70d1c98dd"),
                            Descripcion = "Gafas de sol con lentes polarizadas para una visión clara.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7693),
                            FechaCreacion = new DateTime(2025, 4, 24, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7691),
                            Nombre = "Gafas de Sol Polarizadas",
                            Precio = 59.99m,
                            Stock = 60
                        },
                        new
                        {
                            IdProducto = new Guid("882f3766-47d8-4970-9225-75033be52d8e"),
                            Descripcion = "Una emocionante novela de fantasía y aventuras.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7719),
                            FechaCreacion = new DateTime(2025, 4, 29, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7714),
                            Nombre = "Libro 'Aventuras Épicas'",
                            Precio = 12.50m,
                            Stock = 150
                        },
                        new
                        {
                            IdProducto = new Guid("f37fc157-c3a7-485a-b9c5-80622300627e"),
                            Descripcion = "Taza de cerámica de alta calidad con diseño único.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7732),
                            FechaCreacion = new DateTime(2025, 5, 7, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7730),
                            Nombre = "Taza de Cerámica Decorada",
                            Precio = 8.99m,
                            Stock = 200
                        },
                        new
                        {
                            IdProducto = new Guid("89e32137-8e16-4ecd-9d59-fb92e6efa3e9"),
                            Descripcion = "Funda resistente para proteger tu teléfono de golpes y arañazos.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7758),
                            FechaCreacion = new DateTime(2025, 4, 9, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7737),
                            Nombre = "Funda Protectora para Smartphone",
                            Precio = 24.99m,
                            Stock = 120
                        },
                        new
                        {
                            IdProducto = new Guid("466c5dcf-1cfc-4ee8-ab47-cd3ecefe81c0"),
                            Descripcion = "Reloj elegante con correa de cuero y movimiento de cuarzo.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7763),
                            FechaCreacion = new DateTime(2025, 3, 25, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7761),
                            Nombre = "Reloj de Pulsera Clásico",
                            Precio = 99.99m,
                            Stock = 30
                        },
                        new
                        {
                            IdProducto = new Guid("1cc7ad5f-1580-48d8-b88e-9f267e563b59"),
                            Descripcion = "Auriculares con conexión Bluetooth y sonido de alta fidelidad.",
                            FechaActualizacion = new DateTime(2025, 5, 14, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7770),
                            FechaCreacion = new DateTime(2025, 4, 19, 4, 43, 8, 282, DateTimeKind.Local).AddTicks(7768),
                            Nombre = "Auriculares Inalámbricos Bluetooth",
                            Precio = 69.99m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.Property<Guid>("IdProductoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProductoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductosCategorias");

                    b.HasData(
                        new
                        {
                            IdProductoCategoria = new Guid("c2602fdf-1c21-45ca-9736-cf81dc872f3d"),
                            IdCategoria = new Guid("bece266a-6d03-45c9-ba1b-a7c74d042b95"),
                            IdProducto = new Guid("47c4b2ea-b3b8-4144-a9e5-cb1487d4ef9a")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("dd84b4d7-a157-4946-960a-bca0a0cfee4a"),
                            IdCategoria = new Guid("bece266a-6d03-45c9-ba1b-a7c74d042b95"),
                            IdProducto = new Guid("0fd457ad-407e-4cd0-9ea3-80b3b014eb4f")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("a9f72674-f07d-4a18-9a47-61ec0dbe2a5e"),
                            IdCategoria = new Guid("2a695474-3627-46a4-bf7d-976f2c2bb4c8"),
                            IdProducto = new Guid("3cc06c7c-4b28-48b5-aa7a-3bf78b8b9dea")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("0ba21c19-63f4-43c2-b3e6-e717ebdd4ce0"),
                            IdCategoria = new Guid("2551e083-97db-4592-a4bc-3b598150382b"),
                            IdProducto = new Guid("3cc06c7c-4b28-48b5-aa7a-3bf78b8b9dea")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("7508aee8-2ad3-48c4-9236-5f47ab130653"),
                            IdCategoria = new Guid("184aa515-ed4a-4d3b-b198-b77fab6db1d7"),
                            IdProducto = new Guid("88c8aaf4-cd86-4781-92e0-af69dc028ea2")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("9fad02c5-a763-4b6f-8b29-f56ccdee07b5"),
                            IdCategoria = new Guid("9fa9da00-6885-45c6-96d4-33804713041f"),
                            IdProducto = new Guid("88c8aaf4-cd86-4781-92e0-af69dc028ea2")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("9da9811b-74c0-4e30-ab96-bd189b21eeb8"),
                            IdCategoria = new Guid("184aa515-ed4a-4d3b-b198-b77fab6db1d7"),
                            IdProducto = new Guid("6643ce06-d7bc-46f2-bb73-88e70d1c98dd")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("666f3c52-f4d6-4468-91bb-0b5c44137e26"),
                            IdCategoria = new Guid("10e95e20-903b-4cc7-b7ae-9298a86ab4e2"),
                            IdProducto = new Guid("882f3766-47d8-4970-9225-75033be52d8e")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("5e76f0eb-82d7-4ee0-a331-1d01bd72b0b5"),
                            IdCategoria = new Guid("54c7b8bd-d646-4be4-bdcf-c5cf11f09083"),
                            IdProducto = new Guid("f37fc157-c3a7-485a-b9c5-80622300627e")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("4dbf7983-0e9a-4ac7-8624-fad724688299"),
                            IdCategoria = new Guid("1bea9180-34ce-46c7-8f10-b48afe6b7609"),
                            IdProducto = new Guid("89e32137-8e16-4ecd-9d59-fb92e6efa3e9")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("6668d564-1b12-4c1b-94f4-1425bfdb4c72"),
                            IdCategoria = new Guid("ae8a02ec-0ac1-452d-b248-86d332dedf45"),
                            IdProducto = new Guid("89e32137-8e16-4ecd-9d59-fb92e6efa3e9")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("18ebe6ce-373e-447e-af68-2f131446d7ae"),
                            IdCategoria = new Guid("184aa515-ed4a-4d3b-b198-b77fab6db1d7"),
                            IdProducto = new Guid("466c5dcf-1cfc-4ee8-ab47-cd3ecefe81c0")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("5cb95c59-89bb-49da-b8c8-6237431ea5ce"),
                            IdCategoria = new Guid("36a0ab87-61c6-4eb8-b752-5c218fba1f3d"),
                            IdProducto = new Guid("466c5dcf-1cfc-4ee8-ab47-cd3ecefe81c0")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("b9809c55-ff2e-4139-8e07-3ad16a4ac389"),
                            IdCategoria = new Guid("1bea9180-34ce-46c7-8f10-b48afe6b7609"),
                            IdProducto = new Guid("1cc7ad5f-1580-48d8-b88e-9f267e563b59")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("8970662d-45ee-4b9a-9ea9-12e0221105d4"),
                            IdCategoria = new Guid("ae8a02ec-0ac1-452d-b248-86d332dedf45"),
                            IdProducto = new Guid("1cc7ad5f-1580-48d8-b88e-9f267e563b59")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "db84f9c5-52cf-4086-90d3-b556212e7bc0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9367df67-9205-460a-a177-3b2cd8ff4c2f",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "04f1b2d1-9af0-40f0-9037-1d0b7136abb0",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9c59d061-220a-4cef-b44e-a46e777ab5b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9995e88c-4472-425a-96f1-782b7ca3d80c",
                            Email = "admin@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@NEXUSSHOP.COM",
                            NormalizedUserName = "ADMIN.STAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEFdCOaV39i7WwM+hao3HKM6MiNMKNn7p40jaXoJS9COodfwN/6Pjx1XruJCpbl5hzQ==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c8d7aff-bb35-4b5e-9aec-932b53180051",
                            TwoFactorEnabled = false,
                            UserName = "admin.staff"
                        },
                        new
                        {
                            Id = "6b02a11d-e35d-4ba1-8481-a3b83db341dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0c9c656-7b99-4aa5-8c5c-1680533dba18",
                            Email = "lucia.sanchiz@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@NEXUSSHOP.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ.STAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxwIHkFkiKyNhLKrq71DLXGAvd0q/uCYdo9tAdRGYeNrWIZIOT6DhqXin1vhKuKig==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "914cc1d2-e91a-499c-a341-c84bada1cef8",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz.staff"
                        },
                        new
                        {
                            Id = "c2001ba6-7581-4a6c-94d3-80b348bca906",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39129409-b360-4a77-be71-73533f57d78d",
                            Email = "paco.montoro@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@GMAIL.COM",
                            NormalizedUserName = "PACO.MONTORO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJVGjCGe3NXRH6E65SUd80ERtwx43BNr+vq0bypDh93Mj9qyLQKzonDvb+BtNNYbPg==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c70ec01-7a01-499d-a067-063a1bd9a94f",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9c59d061-220a-4cef-b44e-a46e777ab5b7",
                            RoleId = "db84f9c5-52cf-4086-90d3-b556212e7bc0"
                        },
                        new
                        {
                            UserId = "6b02a11d-e35d-4ba1-8481-a3b83db341dd",
                            RoleId = "9367df67-9205-460a-a177-3b2cd8ff4c2f"
                        },
                        new
                        {
                            UserId = "c2001ba6-7581-4a6c-94d3-80b348bca906",
                            RoleId = "04f1b2d1-9af0-40f0-9037-1d0b7136abb0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Carrito", "Carrito")
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("IdCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Direccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Navigation("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
