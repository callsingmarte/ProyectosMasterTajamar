// <auto-generated />
using System;
using EcommerceBasicoAWS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceBasicoAWS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250512013235_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Property<Guid>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCarrito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("96264c54-f2e2-4ba2-8c36-4e9e5da36bd2"),
                            Nombre = "Ropa"
                        },
                        new
                        {
                            IdCategoria = new Guid("0bd88478-b979-4d0f-81b7-508f1891a0c2"),
                            Nombre = "Calzado"
                        },
                        new
                        {
                            IdCategoria = new Guid("5e1ac5a7-a70e-4f9c-9536-e0cd06cb3636"),
                            Nombre = "Accesorios"
                        },
                        new
                        {
                            IdCategoria = new Guid("465e17d6-5ad5-4cb1-8000-cd6efa7f9c2e"),
                            Nombre = "Hogar"
                        },
                        new
                        {
                            IdCategoria = new Guid("40903fb8-6674-4cfc-b49f-004ad814e15d"),
                            Nombre = "Libros"
                        },
                        new
                        {
                            IdCategoria = new Guid("8a581e93-829f-43a0-a7aa-5d9614c3f8f3"),
                            Nombre = "Tecnología"
                        },
                        new
                        {
                            IdCategoria = new Guid("f4fd199e-07e2-4b06-9857-5954cf71c500"),
                            Nombre = "Electrónica"
                        },
                        new
                        {
                            IdCategoria = new Guid("72062e43-8b0d-46f6-948f-035bf253dd4b"),
                            Nombre = "Deportes"
                        },
                        new
                        {
                            IdCategoria = new Guid("e3c641a7-1cee-41ed-9293-42fb5c13e707"),
                            Nombre = "Belleza"
                        },
                        new
                        {
                            IdCategoria = new Guid("6975d099-65c4-49cf-bea1-b013b19939f3"),
                            Nombre = "Joyería"
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.Property<Guid>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdPedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesPedidos");

                    b.HasData(
                        new
                        {
                            IdDetalle = new Guid("91a4a992-75cb-49c0-bf6f-abd89e137298"),
                            Cantidad = 2,
                            IdPedido = new Guid("93a087d2-59a4-45f4-9bf1-d5db36bbaf52"),
                            IdProducto = new Guid("592d568d-34f8-4e95-90eb-f4b911b0cbaf"),
                            PrecioUnitario = 19.99m,
                            Subtotal = 39.98m
                        },
                        new
                        {
                            IdDetalle = new Guid("9ab541d6-9d44-483d-9fd0-9c56fa72bb21"),
                            Cantidad = 1,
                            IdPedido = new Guid("93a087d2-59a4-45f4-9bf1-d5db36bbaf52"),
                            IdProducto = new Guid("98c8c147-5e36-4909-bbfe-830e44cd06e7"),
                            PrecioUnitario = 12.50m,
                            Subtotal = 12.50m
                        },
                        new
                        {
                            IdDetalle = new Guid("3be9c885-4d5d-43cf-9079-28f5206771ae"),
                            Cantidad = 1,
                            IdPedido = new Guid("245daa81-c409-4438-b7c0-7461116db2ed"),
                            IdProducto = new Guid("86f45a21-2cd3-4bc2-ae90-a66ea2b82a32"),
                            PrecioUnitario = 49.99m,
                            Subtotal = 49.99m
                        },
                        new
                        {
                            IdDetalle = new Guid("abb9c7aa-165d-490c-aeae-7d5bcb658797"),
                            Cantidad = 1,
                            IdPedido = new Guid("245daa81-c409-4438-b7c0-7461116db2ed"),
                            IdProducto = new Guid("cad3270c-d626-402d-ab23-5ade37bbb438"),
                            PrecioUnitario = 69.99m,
                            Subtotal = 69.99m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.Property<Guid>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("principal")
                        .HasColumnType("bit");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.Property<Guid>("IdItemCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCarrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdItemCarrito");

                    b.HasIndex("IdCarrito");

                    b.HasIndex("IdProducto");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.Property<int>("IdMultimedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMultimedia"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMultimedia");

                    b.HasIndex("IdProducto");

                    b.ToTable("MultimediaProductos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDireccion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            IdPedido = new Guid("93a087d2-59a4-45f4-9bf1-d5db36bbaf52"),
                            Estado = "Pendiente",
                            FechaCreacion = new DateTime(2025, 5, 11, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(5294),
                            IdDireccion = new Guid("2512f267-60f1-4605-8c3a-298f1365b06e"),
                            IdUsuario = "65a989e1-716b-4a5a-8092-228aba53d27b",
                            Numero = 1,
                            Total = 45.99m
                        },
                        new
                        {
                            IdPedido = new Guid("245daa81-c409-4438-b7c0-7461116db2ed"),
                            Estado = "Enviado",
                            FechaCreacion = new DateTime(2025, 5, 7, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(5320),
                            IdDireccion = new Guid("2512f267-60f1-4605-8c3a-298f1365b06e"),
                            IdUsuario = "65a989e1-716b-4a5a-8092-228aba53d27b",
                            Numero = 2,
                            Total = 89.50m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Producto", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            IdProducto = new Guid("592d568d-34f8-4e95-90eb-f4b911b0cbaf"),
                            Descripcion = "Camiseta de manga corta, 100% algodón suave.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2225),
                            FechaCreacion = new DateTime(2025, 4, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2169),
                            Nombre = "Camiseta Básica Algodón",
                            Precio = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            IdProducto = new Guid("86f45a21-2cd3-4bc2-ae90-a66ea2b82a32"),
                            Descripcion = "Pantalón vaquero clásico de corte recto.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2233),
                            FechaCreacion = new DateTime(2025, 3, 13, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2231),
                            Nombre = "Pantalón Vaquero Recto",
                            Precio = 49.99m,
                            Stock = 50
                        },
                        new
                        {
                            IdProducto = new Guid("0d0d1ec4-28f9-4602-9192-73857bacce94"),
                            Descripcion = "Zapatillas cómodas y con estilo para el día a día.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2278),
                            FechaCreacion = new DateTime(2025, 3, 28, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2237),
                            Nombre = "Zapatillas Deportivas Urbanas",
                            Precio = 79.99m,
                            Stock = 75
                        },
                        new
                        {
                            IdProducto = new Guid("c948f261-7971-4a67-8016-048a39c93380"),
                            Descripcion = "Bolso de cuero genuino con múltiples compartimentos.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2312),
                            FechaCreacion = new DateTime(2025, 2, 11, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2310),
                            Nombre = "Bolso de Cuero Grande",
                            Precio = 129.99m,
                            Stock = 20
                        },
                        new
                        {
                            IdProducto = new Guid("74312f93-a549-4781-9d51-f9af37904cd8"),
                            Descripcion = "Gafas de sol con lentes polarizadas para una visión clara.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2317),
                            FechaCreacion = new DateTime(2025, 4, 22, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2315),
                            Nombre = "Gafas de Sol Polarizadas",
                            Precio = 59.99m,
                            Stock = 60
                        },
                        new
                        {
                            IdProducto = new Guid("98c8c147-5e36-4909-bbfe-830e44cd06e7"),
                            Descripcion = "Una emocionante novela de fantasía y aventuras.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2360),
                            FechaCreacion = new DateTime(2025, 4, 27, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2358),
                            Nombre = "Libro 'Aventuras Épicas'",
                            Precio = 12.50m,
                            Stock = 150
                        },
                        new
                        {
                            IdProducto = new Guid("8cb0babf-d0ee-4841-a669-03530bb11a99"),
                            Descripcion = "Taza de cerámica de alta calidad con diseño único.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2370),
                            FechaCreacion = new DateTime(2025, 5, 5, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2368),
                            Nombre = "Taza de Cerámica Decorada",
                            Precio = 8.99m,
                            Stock = 200
                        },
                        new
                        {
                            IdProducto = new Guid("60cd904c-9858-45e7-9ce8-b1a6838628dd"),
                            Descripcion = "Funda resistente para proteger tu teléfono de golpes y arañazos.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2398),
                            FechaCreacion = new DateTime(2025, 4, 7, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2374),
                            Nombre = "Funda Protectora para Smartphone",
                            Precio = 24.99m,
                            Stock = 120
                        },
                        new
                        {
                            IdProducto = new Guid("1311034f-68d5-400f-bf2b-f0821531f556"),
                            Descripcion = "Reloj elegante con correa de cuero y movimiento de cuarzo.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2407),
                            FechaCreacion = new DateTime(2025, 3, 23, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2405),
                            Nombre = "Reloj de Pulsera Clásico",
                            Precio = 99.99m,
                            Stock = 30
                        },
                        new
                        {
                            IdProducto = new Guid("cad3270c-d626-402d-ab23-5ade37bbb438"),
                            Descripcion = "Auriculares con conexión Bluetooth y sonido de alta fidelidad.",
                            FechaActualizacion = new DateTime(2025, 5, 12, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2414),
                            FechaCreacion = new DateTime(2025, 4, 17, 3, 32, 35, 271, DateTimeKind.Local).AddTicks(2412),
                            Nombre = "Auriculares Inalámbricos Bluetooth",
                            Precio = 69.99m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.Property<Guid>("IdProductoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProductoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductosCategorias");

                    b.HasData(
                        new
                        {
                            IdProductoCategoria = new Guid("3ebf3fa3-c209-4b14-b8d9-2f199a8a3355"),
                            IdCategoria = new Guid("96264c54-f2e2-4ba2-8c36-4e9e5da36bd2"),
                            IdProducto = new Guid("592d568d-34f8-4e95-90eb-f4b911b0cbaf")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("aad50a98-acf1-4e41-a38e-8aec76c8c8d6"),
                            IdCategoria = new Guid("96264c54-f2e2-4ba2-8c36-4e9e5da36bd2"),
                            IdProducto = new Guid("86f45a21-2cd3-4bc2-ae90-a66ea2b82a32")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("1846649b-2a50-4d82-85dd-04b1e21bea90"),
                            IdCategoria = new Guid("0bd88478-b979-4d0f-81b7-508f1891a0c2"),
                            IdProducto = new Guid("0d0d1ec4-28f9-4602-9192-73857bacce94")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("e6ee808b-6b52-4afe-943f-55be3cdaf7ca"),
                            IdCategoria = new Guid("72062e43-8b0d-46f6-948f-035bf253dd4b"),
                            IdProducto = new Guid("0d0d1ec4-28f9-4602-9192-73857bacce94")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("ae17281d-29fd-4b69-8c2a-c50ed88182f6"),
                            IdCategoria = new Guid("5e1ac5a7-a70e-4f9c-9536-e0cd06cb3636"),
                            IdProducto = new Guid("c948f261-7971-4a67-8016-048a39c93380")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("4f88fb33-f1fa-4ca4-8bc1-a965b68083f7"),
                            IdCategoria = new Guid("e3c641a7-1cee-41ed-9293-42fb5c13e707"),
                            IdProducto = new Guid("c948f261-7971-4a67-8016-048a39c93380")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("4215d0eb-7390-4585-9dd8-976b79e5004f"),
                            IdCategoria = new Guid("5e1ac5a7-a70e-4f9c-9536-e0cd06cb3636"),
                            IdProducto = new Guid("74312f93-a549-4781-9d51-f9af37904cd8")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("6a65eca3-c241-4dd9-8389-34c17bd0b6b0"),
                            IdCategoria = new Guid("40903fb8-6674-4cfc-b49f-004ad814e15d"),
                            IdProducto = new Guid("98c8c147-5e36-4909-bbfe-830e44cd06e7")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("645e5546-f62d-4550-ad7b-484149b0c2f4"),
                            IdCategoria = new Guid("465e17d6-5ad5-4cb1-8000-cd6efa7f9c2e"),
                            IdProducto = new Guid("8cb0babf-d0ee-4841-a669-03530bb11a99")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("01c21a67-581d-492a-a287-6bd74dc80bb2"),
                            IdCategoria = new Guid("8a581e93-829f-43a0-a7aa-5d9614c3f8f3"),
                            IdProducto = new Guid("60cd904c-9858-45e7-9ce8-b1a6838628dd")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("b2ead4e0-e6c1-44de-888b-dcf84c264ff7"),
                            IdCategoria = new Guid("f4fd199e-07e2-4b06-9857-5954cf71c500"),
                            IdProducto = new Guid("60cd904c-9858-45e7-9ce8-b1a6838628dd")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("b6f4c035-a3b1-42b2-a9ca-494a1d46d9a5"),
                            IdCategoria = new Guid("5e1ac5a7-a70e-4f9c-9536-e0cd06cb3636"),
                            IdProducto = new Guid("1311034f-68d5-400f-bf2b-f0821531f556")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("08cbbcc5-3577-4ece-aef2-19cdd0bdc61d"),
                            IdCategoria = new Guid("6975d099-65c4-49cf-bea1-b013b19939f3"),
                            IdProducto = new Guid("1311034f-68d5-400f-bf2b-f0821531f556")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("dea84690-512e-435f-a173-f5138dd0c800"),
                            IdCategoria = new Guid("8a581e93-829f-43a0-a7aa-5d9614c3f8f3"),
                            IdProducto = new Guid("cad3270c-d626-402d-ab23-5ade37bbb438")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("7b3e6d10-e20c-48e0-be79-5ac1056ec8d6"),
                            IdCategoria = new Guid("f4fd199e-07e2-4b06-9857-5954cf71c500"),
                            IdProducto = new Guid("cad3270c-d626-402d-ab23-5ade37bbb438")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3721dd9a-2408-4778-91fa-1eb4c12be91f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fe5a2f76-33e9-4660-b8fb-1300d7dcc963",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "40c93d90-21a0-4af2-8d73-3bc54473bb92",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d42ec11d-0ec2-424d-bee5-16ae6e05d209",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "359fa2ff-1c64-49aa-9d6a-d993487b397d",
                            Email = "admin@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@NEXUSSHOP.COM",
                            NormalizedUserName = "ADMIN.STAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEA1TbLL/+webcii5IungMOHFim5OFfuBBOcOAKIuVYnJWJ2sjVp6LkSgD2FtxetDhA==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b5b9c28-3d96-4dca-a09a-618280719ee9",
                            TwoFactorEnabled = false,
                            UserName = "admin.staff"
                        },
                        new
                        {
                            Id = "9c000a59-685e-455f-af53-28490b148cea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a07a6e10-a4b6-4c5b-9cf2-3f02779e7db4",
                            Email = "lucia.sanchiz@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@NEXUSSHOP.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ.STAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEBx4RTDf3AwL+z+rXuLWjB9LlujCFbEqbPRew4KeXY73cv7ZAU9CyK0vUpTbHDdivA==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63d1a0dc-863f-47d9-b736-7e2234542b77",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz.staff"
                        },
                        new
                        {
                            Id = "65a989e1-716b-4a5a-8092-228aba53d27b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2517a2dc-d5bd-40d3-b1d5-5233cce420fb",
                            Email = "paco.montoro@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@GMAIL.COM",
                            NormalizedUserName = "PACO.MONTORO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP8LVAUgKwfEkeJ9r8l4iFciEa0J6NOUbUx0kbhxLtpLOglRv+nnGWLq3frjXwlriA==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b685be8d-bac6-44f3-bf8a-cc0c1792116a",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d42ec11d-0ec2-424d-bee5-16ae6e05d209",
                            RoleId = "3721dd9a-2408-4778-91fa-1eb4c12be91f"
                        },
                        new
                        {
                            UserId = "9c000a59-685e-455f-af53-28490b148cea",
                            RoleId = "fe5a2f76-33e9-4660-b8fb-1300d7dcc963"
                        },
                        new
                        {
                            UserId = "65a989e1-716b-4a5a-8092-228aba53d27b",
                            RoleId = "40c93d90-21a0-4af2-8d73-3bc54473bb92"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Carrito", "Carrito")
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("IdCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Direccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Navigation("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
