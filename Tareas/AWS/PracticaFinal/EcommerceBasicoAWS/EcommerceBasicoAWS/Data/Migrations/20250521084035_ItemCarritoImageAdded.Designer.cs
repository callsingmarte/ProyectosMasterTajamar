// <auto-generated />
using System;
using EcommerceBasicoAWS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceBasicoAWS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521084035_ItemCarritoImageAdded")]
    partial class ItemCarritoImageAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Property<Guid>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCarrito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("24bf372e-8936-4fbf-8d21-81b91e7c9a25"),
                            Nombre = "Ropa"
                        },
                        new
                        {
                            IdCategoria = new Guid("fd312981-e795-403d-a31d-5a32077c0232"),
                            Nombre = "Calzado"
                        },
                        new
                        {
                            IdCategoria = new Guid("4ee9ea41-0b2a-4a42-9637-b143034a590c"),
                            Nombre = "Accesorios"
                        },
                        new
                        {
                            IdCategoria = new Guid("bf395ed3-c1e5-4cbc-93f5-d73a880d5774"),
                            Nombre = "Hogar"
                        },
                        new
                        {
                            IdCategoria = new Guid("ba62943f-1480-4bdd-b590-f824b70fc1fe"),
                            Nombre = "Libros"
                        },
                        new
                        {
                            IdCategoria = new Guid("1e151a41-ab08-4f66-9c64-c3e95c97af47"),
                            Nombre = "Tecnología"
                        },
                        new
                        {
                            IdCategoria = new Guid("e7e3f7ca-5d40-4d23-8ffa-44a7aea070b8"),
                            Nombre = "Electrónica"
                        },
                        new
                        {
                            IdCategoria = new Guid("0199fb45-4f90-41f9-88f5-823cbecbbfc5"),
                            Nombre = "Deportes"
                        },
                        new
                        {
                            IdCategoria = new Guid("82252331-cf7f-4544-8161-d3c33cae4121"),
                            Nombre = "Belleza"
                        },
                        new
                        {
                            IdCategoria = new Guid("e98f528d-99cc-4b55-b1d6-eda10ecfc879"),
                            Nombre = "Joyería"
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.Property<Guid>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdPedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesPedidos");

                    b.HasData(
                        new
                        {
                            IdDetalle = new Guid("fdac9a7a-f6f2-46f4-8bc5-211bd6762cb0"),
                            Cantidad = 2,
                            IdPedido = new Guid("25054ab4-7ad3-4c5d-a3d7-d4c8105cc4e3"),
                            IdProducto = new Guid("e0009b89-c414-4715-95ad-095fa75dc331"),
                            PrecioUnitario = 19.99m,
                            Subtotal = 39.98m
                        },
                        new
                        {
                            IdDetalle = new Guid("b55bfb46-5cb5-4df2-b54d-67ee1ab2dc7d"),
                            Cantidad = 1,
                            IdPedido = new Guid("25054ab4-7ad3-4c5d-a3d7-d4c8105cc4e3"),
                            IdProducto = new Guid("71bb098c-ee88-4b42-87a6-28058b5687c7"),
                            PrecioUnitario = 12.50m,
                            Subtotal = 12.50m
                        },
                        new
                        {
                            IdDetalle = new Guid("514677cd-56e8-4d03-ad5f-3513bcee8d0f"),
                            Cantidad = 1,
                            IdPedido = new Guid("0ed5d9ee-359a-4d79-9789-f796996554c0"),
                            IdProducto = new Guid("c464ef7d-1568-4ac8-8452-2accb5e78be3"),
                            PrecioUnitario = 49.99m,
                            Subtotal = 49.99m
                        },
                        new
                        {
                            IdDetalle = new Guid("fdfb1d9e-cc61-4377-b322-f8f15e26e4da"),
                            Cantidad = 1,
                            IdPedido = new Guid("0ed5d9ee-359a-4d79-9789-f796996554c0"),
                            IdProducto = new Guid("97bc96e2-dd06-40a0-8c98-c43e18d774c0"),
                            PrecioUnitario = 69.99m,
                            Subtotal = 69.99m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.Property<Guid>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("principal")
                        .HasColumnType("bit");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direcciones");

                    b.HasData(
                        new
                        {
                            IdDireccion = new Guid("f1f7ea57-94ed-4c28-b16f-80e2e2bb56b9"),
                            Ciudad = "Madrid",
                            CodigoPostal = 28080,
                            Domicilio = "Avenida Siempreviva 742",
                            IdUsuario = "7f6ba682-5e9f-4f59-8805-1f5372d5f35b",
                            Pais = "España",
                            Provincia = "Madrid",
                            principal = true
                        },
                        new
                        {
                            IdDireccion = new Guid("ec83090e-331c-4a3e-ac73-48e049b8665a"),
                            Ciudad = "Barcelona",
                            CodigoPostal = 8001,
                            Domicilio = "Calle de la Piruleta 15",
                            IdUsuario = "7f6ba682-5e9f-4f59-8805-1f5372d5f35b",
                            Pais = "España",
                            Provincia = "Barcelona",
                            principal = false
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.Property<Guid>("IdItemCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCarrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdItemCarrito");

                    b.HasIndex("IdCarrito");

                    b.HasIndex("IdProducto");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.Property<int>("IdMultimedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMultimedia"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMultimedia");

                    b.HasIndex("IdProducto");

                    b.ToTable("MultimediaProductos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDireccion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            IdPedido = new Guid("25054ab4-7ad3-4c5d-a3d7-d4c8105cc4e3"),
                            Estado = "Pendiente",
                            FechaCreacion = new DateTime(2025, 5, 20, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(8424),
                            IdDireccion = new Guid("f1f7ea57-94ed-4c28-b16f-80e2e2bb56b9"),
                            IdUsuario = "7f6ba682-5e9f-4f59-8805-1f5372d5f35b",
                            Numero = 1,
                            Total = 45.99m
                        },
                        new
                        {
                            IdPedido = new Guid("0ed5d9ee-359a-4d79-9789-f796996554c0"),
                            Estado = "Enviado",
                            FechaCreacion = new DateTime(2025, 5, 16, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(8446),
                            IdDireccion = new Guid("f1f7ea57-94ed-4c28-b16f-80e2e2bb56b9"),
                            IdUsuario = "7f6ba682-5e9f-4f59-8805-1f5372d5f35b",
                            Numero = 2,
                            Total = 89.50m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Producto", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            IdProducto = new Guid("e0009b89-c414-4715-95ad-095fa75dc331"),
                            Descripcion = "Camiseta de manga corta, 100% algodón suave.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5043),
                            FechaCreacion = new DateTime(2025, 4, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(4990),
                            Nombre = "Camiseta Básica Algodón",
                            Precio = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            IdProducto = new Guid("c464ef7d-1568-4ac8-8452-2accb5e78be3"),
                            Descripcion = "Pantalón vaquero clásico de corte recto.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5052),
                            FechaCreacion = new DateTime(2025, 3, 22, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5050),
                            Nombre = "Pantalón Vaquero Recto",
                            Precio = 49.99m,
                            Stock = 50
                        },
                        new
                        {
                            IdProducto = new Guid("cbbe008e-9d5d-4cf4-a4fa-2d2c910c9515"),
                            Descripcion = "Zapatillas cómodas y con estilo para el día a día.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5129),
                            FechaCreacion = new DateTime(2025, 4, 6, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5056),
                            Nombre = "Zapatillas Deportivas Urbanas",
                            Precio = 79.99m,
                            Stock = 75
                        },
                        new
                        {
                            IdProducto = new Guid("a7987e74-9e49-410b-a709-f472f93a298c"),
                            Descripcion = "Bolso de cuero genuino con múltiples compartimentos.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5144),
                            FechaCreacion = new DateTime(2025, 2, 20, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5142),
                            Nombre = "Bolso de Cuero Grande",
                            Precio = 129.99m,
                            Stock = 20
                        },
                        new
                        {
                            IdProducto = new Guid("90fa0563-17c1-4779-9fd9-ce313d115060"),
                            Descripcion = "Gafas de sol con lentes polarizadas para una visión clara.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5149),
                            FechaCreacion = new DateTime(2025, 5, 1, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5148),
                            Nombre = "Gafas de Sol Polarizadas",
                            Precio = 59.99m,
                            Stock = 60
                        },
                        new
                        {
                            IdProducto = new Guid("71bb098c-ee88-4b42-87a6-28058b5687c7"),
                            Descripcion = "Una emocionante novela de fantasía y aventuras.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5188),
                            FechaCreacion = new DateTime(2025, 5, 6, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5185),
                            Nombre = "Libro 'Aventuras Épicas'",
                            Precio = 12.50m,
                            Stock = 150
                        },
                        new
                        {
                            IdProducto = new Guid("66b287c6-acd0-47e4-b0af-045cde2d6433"),
                            Descripcion = "Taza de cerámica de alta calidad con diseño único.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5201),
                            FechaCreacion = new DateTime(2025, 5, 14, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5199),
                            Nombre = "Taza de Cerámica Decorada",
                            Precio = 8.99m,
                            Stock = 200
                        },
                        new
                        {
                            IdProducto = new Guid("b8450b78-cd14-4e65-97ac-3649a55fd9a0"),
                            Descripcion = "Funda resistente para proteger tu teléfono de golpes y arañazos.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5226),
                            FechaCreacion = new DateTime(2025, 4, 16, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5204),
                            Nombre = "Funda Protectora para Smartphone",
                            Precio = 24.99m,
                            Stock = 120
                        },
                        new
                        {
                            IdProducto = new Guid("723863c8-1a7e-444b-92c5-a5933f9a7d87"),
                            Descripcion = "Reloj elegante con correa de cuero y movimiento de cuarzo.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5232),
                            FechaCreacion = new DateTime(2025, 4, 1, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5230),
                            Nombre = "Reloj de Pulsera Clásico",
                            Precio = 99.99m,
                            Stock = 30
                        },
                        new
                        {
                            IdProducto = new Guid("97bc96e2-dd06-40a0-8c98-c43e18d774c0"),
                            Descripcion = "Auriculares con conexión Bluetooth y sonido de alta fidelidad.",
                            FechaActualizacion = new DateTime(2025, 5, 21, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5238),
                            FechaCreacion = new DateTime(2025, 4, 26, 10, 40, 34, 615, DateTimeKind.Local).AddTicks(5237),
                            Nombre = "Auriculares Inalámbricos Bluetooth",
                            Precio = 69.99m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.Property<Guid>("IdProductoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProductoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductosCategorias");

                    b.HasData(
                        new
                        {
                            IdProductoCategoria = new Guid("ce27ed17-5d11-411e-b0a1-7706adf478ae"),
                            IdCategoria = new Guid("24bf372e-8936-4fbf-8d21-81b91e7c9a25"),
                            IdProducto = new Guid("e0009b89-c414-4715-95ad-095fa75dc331")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("184c4879-5b84-47b4-af27-2c8260f15fd5"),
                            IdCategoria = new Guid("24bf372e-8936-4fbf-8d21-81b91e7c9a25"),
                            IdProducto = new Guid("c464ef7d-1568-4ac8-8452-2accb5e78be3")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("2d2ffcc2-9dd0-4878-abbe-00e9de78deaa"),
                            IdCategoria = new Guid("fd312981-e795-403d-a31d-5a32077c0232"),
                            IdProducto = new Guid("cbbe008e-9d5d-4cf4-a4fa-2d2c910c9515")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("e5d0b040-f7d0-42c8-8330-42f6fdff3458"),
                            IdCategoria = new Guid("0199fb45-4f90-41f9-88f5-823cbecbbfc5"),
                            IdProducto = new Guid("cbbe008e-9d5d-4cf4-a4fa-2d2c910c9515")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("6b71d369-9edd-4012-b445-9693b884d7a6"),
                            IdCategoria = new Guid("4ee9ea41-0b2a-4a42-9637-b143034a590c"),
                            IdProducto = new Guid("a7987e74-9e49-410b-a709-f472f93a298c")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("9974718d-39c2-4f04-9d9e-00019ea6b87f"),
                            IdCategoria = new Guid("82252331-cf7f-4544-8161-d3c33cae4121"),
                            IdProducto = new Guid("a7987e74-9e49-410b-a709-f472f93a298c")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("5e077d2e-6a33-4d92-8980-9a8e2e4ff090"),
                            IdCategoria = new Guid("4ee9ea41-0b2a-4a42-9637-b143034a590c"),
                            IdProducto = new Guid("90fa0563-17c1-4779-9fd9-ce313d115060")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("eb86f009-daca-4b04-aa88-828ed2c2615b"),
                            IdCategoria = new Guid("ba62943f-1480-4bdd-b590-f824b70fc1fe"),
                            IdProducto = new Guid("71bb098c-ee88-4b42-87a6-28058b5687c7")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("516af201-534f-43ed-9b28-6a326a303f10"),
                            IdCategoria = new Guid("bf395ed3-c1e5-4cbc-93f5-d73a880d5774"),
                            IdProducto = new Guid("66b287c6-acd0-47e4-b0af-045cde2d6433")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("8325752a-6bd9-4e82-9c16-e59e97c3de6e"),
                            IdCategoria = new Guid("1e151a41-ab08-4f66-9c64-c3e95c97af47"),
                            IdProducto = new Guid("b8450b78-cd14-4e65-97ac-3649a55fd9a0")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("7f77872d-7275-4edc-8a4e-a879d66e0c73"),
                            IdCategoria = new Guid("e7e3f7ca-5d40-4d23-8ffa-44a7aea070b8"),
                            IdProducto = new Guid("b8450b78-cd14-4e65-97ac-3649a55fd9a0")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("5e5db5a4-2491-41dd-9da9-464e7b5c5f0c"),
                            IdCategoria = new Guid("4ee9ea41-0b2a-4a42-9637-b143034a590c"),
                            IdProducto = new Guid("723863c8-1a7e-444b-92c5-a5933f9a7d87")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("253cc766-74db-4933-8519-0754937e88e9"),
                            IdCategoria = new Guid("e98f528d-99cc-4b55-b1d6-eda10ecfc879"),
                            IdProducto = new Guid("723863c8-1a7e-444b-92c5-a5933f9a7d87")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("c4487414-5bc0-4f23-8ce3-e7794f1de576"),
                            IdCategoria = new Guid("1e151a41-ab08-4f66-9c64-c3e95c97af47"),
                            IdProducto = new Guid("97bc96e2-dd06-40a0-8c98-c43e18d774c0")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("c181869f-08a4-4ce2-aa45-9f599536568d"),
                            IdCategoria = new Guid("e7e3f7ca-5d40-4d23-8ffa-44a7aea070b8"),
                            IdProducto = new Guid("97bc96e2-dd06-40a0-8c98-c43e18d774c0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "71061cec-029c-4dec-b1f0-24828b683206",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e256a823-d66c-457c-850e-4c66ea6f9173",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "4eb7fdef-aa3c-473e-94b0-1521fca6475e",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d8e55bc7-cccf-4295-8193-44708d9c8710",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40ace187-0738-4a43-bc71-71eb8f5f98c0",
                            Email = "admin@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@NEXUSSHOP.COM",
                            NormalizedUserName = "ADMIN@NEXUSSHOP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMwTh8JCsdVd530P7JTFUdqrPBtKYBbsVBKjoEQVyYfyMzOH6+rbcffynJDB1sxWA==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c68f4c8-687e-48b1-ad7c-327eb97c7c4f",
                            TwoFactorEnabled = false,
                            UserName = "admin@nexusshop.com"
                        },
                        new
                        {
                            Id = "51e5f7db-a9cc-4886-95e5-b9a5d5bed5e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09eb7659-1c69-4a82-ac6a-7c6fe6a16c86",
                            Email = "lucia.sanchiz@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@NEXUSSHOP.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ@NEXUSSHOP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJq2SZ2kl84o+rEf6KJWDaZFwc/+61zCRDDnmfufPJ+YeTMyVQU2UL5ONcrUVTJSQ==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b36c552-9d84-420b-91c8-35dc39e63e1b",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz@nexusshop.com"
                        },
                        new
                        {
                            Id = "7f6ba682-5e9f-4f59-8805-1f5372d5f35b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7c69dc8-0145-475b-b74e-b58dc572355d",
                            Email = "paco.montoro@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@GMAIL.COM",
                            NormalizedUserName = "PACO.MONTORO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdjZZ7LmXCue1xMeaSuAhV1x1uaYiddNlCI0hMCEr+5TpunPoJXVzABo1daDq3uPw==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5a2b3c1-2ffc-434a-b54a-85a11587f185",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d8e55bc7-cccf-4295-8193-44708d9c8710",
                            RoleId = "71061cec-029c-4dec-b1f0-24828b683206"
                        },
                        new
                        {
                            UserId = "51e5f7db-a9cc-4886-95e5-b9a5d5bed5e5",
                            RoleId = "e256a823-d66c-457c-850e-4c66ea6f9173"
                        },
                        new
                        {
                            UserId = "7f6ba682-5e9f-4f59-8805-1f5372d5f35b",
                            RoleId = "4eb7fdef-aa3c-473e-94b0-1521fca6475e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Carrito", "Carrito")
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("IdCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Direccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Navigation("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
