// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smith_Swimming_School.Data;

#nullable disable

namespace Smith_Swimming_School.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241215194325_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9903d0e0-a2d4-4166-b493-3cfed45f47e5",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "0fa26d6e-6119-4101-b9b7-39f20ad243c6",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "d5eaa6bb-7b02-4bf5-8ce6-790a294c099b",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = "649dc207-e72b-44a6-bfe6-421345229e7c",
                            Name = "Swimmer",
                            NormalizedName = "SWIMMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "da60d194-a58d-457f-9275-5cc507cc7541",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba5f7af9-aa64-48dc-9685-c906b172dc85",
                            Email = "admin@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@3S.COM",
                            NormalizedUserName = "ADMIN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGIfpPqHkwJ8p2E7PTyy3TXP/fywmchFi89Q4PQbSLJrCXC56MY9ihWB7CpmsXl8rw==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed22ba1b-0662-4c3c-b2c5-af7d8f4b35d6",
                            TwoFactorEnabled = false,
                            UserName = "admin@3s.com"
                        },
                        new
                        {
                            Id = "3e68cf35-5091-4e4d-89b9-7f2276754220",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a9b364e-a4e1-46d1-bb2f-7b77711e1f79",
                            Email = "lucia.sanchiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@GMAIL.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMx9Refn5g60NoPQEKDfclCLO8Y41rjETwQYmKUrFYUEJBtPtKajRtMnYDA216H+0w==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efcc6459-4db4-4259-a3e7-2c3fd114a619",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz@gmail.com"
                        },
                        new
                        {
                            Id = "8be01698-fef8-4dc2-8c31-c2b6c4e012fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dbfdc20-73dd-487d-af7f-752337adf0c7",
                            Email = "paco.montoro@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@3S.COM",
                            NormalizedUserName = "PACO.MONTORO@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8wQwdEFuDC0O+DZ8RSmGwwPPeDGZJXKBdHUTiuIhL31+DchN1Zi53tAxi+ZddRPw==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83d3d8db-8505-4ac4-89a4-3cc1bd189ee9",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro@3s.com"
                        },
                        new
                        {
                            Id = "fe47a591-3b43-41ea-9bac-3042e217ed4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f240483-f6f8-425e-ab1b-918990b55960",
                            Email = "marta.alonso@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTA.ALONSO@3S.COM",
                            NormalizedUserName = "MARTA.ALONSO@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAP1mczBzBVdda7naEIKPIN1//qKYuIF4FECoyaUdjdxJf9N7CpuxaEYqayxljLfgg==",
                            PhoneNumber = "632541278",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd4739df-05b3-4be5-9c51-5a8070066250",
                            TwoFactorEnabled = false,
                            UserName = "marta.alonso@3s.com"
                        },
                        new
                        {
                            Id = "4860aea5-d244-4409-abd3-0446ddeed21f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7f2fe5e-2801-48df-9979-0947a96ec887",
                            Email = "maria.guerrero@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GUERRERO@GMAIL.COM",
                            NormalizedUserName = "MARIA.GUERRERO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpMEW4j0HGEkqJkwtMU4jVIiXLPrd/mqNrZu94GPAUUIOIekOJv/5z9w+9925FYfA==",
                            PhoneNumber = "685214378",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05296633-d5f0-43ec-9d4f-f52e44ec1b66",
                            TwoFactorEnabled = false,
                            UserName = "maria.guerrero@gmail.com"
                        },
                        new
                        {
                            Id = "ecf096ec-367a-4fa3-bdf4-069677b074ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a94adbf-c667-4c74-8443-48c22df77fcc",
                            Email = "raul.hernandez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAUL.HERNANDEZ@GMAIL.COM",
                            NormalizedUserName = "RAUL.HERNANDEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAWL/uqopwpllc+GnKXuF40AIu57WdVGRWLcbR2ARoiMEsfNgsqGYdjgCVlh8GR8g==",
                            PhoneNumber = "693251487",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80e2f5f0-1165-4ebf-96a1-86fec9642d9f",
                            TwoFactorEnabled = false,
                            UserName = "raul.hernandez@gmail.com"
                        },
                        new
                        {
                            Id = "aa2d1b3a-818d-4da3-bfe4-de95452c2d98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c21739b0-248a-4e60-b824-9983f771cfb5",
                            Email = "martin.sanchez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN.SANCHEZ@GMAIL.COM",
                            NormalizedUserName = "MARTIN.SANCHEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMB6DpBhU14yMgMkCcF/jQkJ5BCJ4ei2+wQDhRqrST6F1JVj9MZrTQOfayp4ya0F9w==",
                            PhoneNumber = "602145318",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ea0200b-a909-4911-a104-ed48d5c60bf7",
                            TwoFactorEnabled = false,
                            UserName = "martin.sanchez@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "da60d194-a58d-457f-9275-5cc507cc7541",
                            RoleId = "9903d0e0-a2d4-4166-b493-3cfed45f47e5"
                        },
                        new
                        {
                            UserId = "3e68cf35-5091-4e4d-89b9-7f2276754220",
                            RoleId = "d5eaa6bb-7b02-4bf5-8ce6-790a294c099b"
                        },
                        new
                        {
                            UserId = "8be01698-fef8-4dc2-8c31-c2b6c4e012fd",
                            RoleId = "0fa26d6e-6119-4101-b9b7-39f20ad243c6"
                        },
                        new
                        {
                            UserId = "fe47a591-3b43-41ea-9bac-3042e217ed4c",
                            RoleId = "0fa26d6e-6119-4101-b9b7-39f20ad243c6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Coach", b =>
                {
                    b.Property<int>("Id_Coach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Coach"));

                    b.Property<string>("CoachUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Coach");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id_Coach = 1,
                            CoachUser = "paco.montoro@3s.com",
                            Name = "Paco Montoro",
                            Phone_Number = "632514785"
                        },
                        new
                        {
                            Id_Coach = 2,
                            CoachUser = "marta.alonso@3s.com",
                            Name = "Marta Alonso",
                            Phone_Number = "632541278"
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Course", b =>
                {
                    b.Property<int>("Id_Course")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Course"));

                    b.Property<int?>("CoachId_Coach")
                        .HasColumnType("int");

                    b.Property<int>("Id_Coach")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPlaces")
                        .HasColumnType("int");

                    b.HasKey("Id_Course");

                    b.HasIndex("CoachId_Coach");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id_Course = 1,
                            Id_Coach = 2,
                            Title = "Swim Training for Endurance",
                            TotalPlaces = 15
                        },
                        new
                        {
                            Id_Course = 2,
                            Id_Coach = 1,
                            Title = "Breaststroke Fundamentals",
                            TotalPlaces = 10
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Enrollment", b =>
                {
                    b.Property<int>("Id_Enrollment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Enrollment"));

                    b.Property<int?>("CourseId_Course")
                        .HasColumnType("int");

                    b.Property<int?>("GroupingId_Grouping")
                        .HasColumnType("int");

                    b.Property<int>("Id_Course")
                        .HasColumnType("int");

                    b.Property<int>("Id_Grouping")
                        .HasColumnType("int");

                    b.Property<int>("Id_Swimmer")
                        .HasColumnType("int");

                    b.Property<int?>("SwimmerId_Swimmer")
                        .HasColumnType("int");

                    b.HasKey("Id_Enrollment");

                    b.HasIndex("CourseId_Course");

                    b.HasIndex("GroupingId_Grouping");

                    b.HasIndex("SwimmerId_Swimmer");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id_Enrollment = 1,
                            Id_Course = 2,
                            Id_Grouping = 1,
                            Id_Swimmer = 1
                        },
                        new
                        {
                            Id_Enrollment = 2,
                            Id_Course = 1,
                            Id_Grouping = 2,
                            Id_Swimmer = 3
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Group", b =>
                {
                    b.Property<int>("Id_Grouping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Grouping"));

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Places")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Grouping");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id_Grouping = 1,
                            End_Date = new DateTime(2025, 1, 31, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 1,
                            Name = "Young Swimmer fundamentals",
                            Places = 5,
                            Start_Date = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Grouping = 2,
                            End_Date = new DateTime(2024, 1, 30, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Level = 7,
                            Name = "Adult Learning for endurance",
                            Places = 15,
                            Start_Date = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Grouping = 3,
                            End_Date = new DateTime(2024, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 3,
                            Name = "Young Swimmer lv3 fundamentals",
                            Places = 5,
                            Start_Date = new DateTime(2024, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Report", b =>
                {
                    b.Property<int>("Id_Report")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Report"));

                    b.Property<int?>("EnrollmentId_Enrollment")
                        .HasColumnType("int");

                    b.Property<int>("Id_Enrollment")
                        .HasColumnType("int");

                    b.Property<string>("ProgressReport")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Report");

                    b.HasIndex("EnrollmentId_Enrollment");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id_Report = 1,
                            Id_Enrollment = 2,
                            ProgressReport = "El alumno progresa adecuadamente"
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Swimmer", b =>
                {
                    b.Property<int>("Id_Swimmer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Swimmer"));

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwimmerUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Swimmer");

                    b.ToTable("Swimmers");

                    b.HasData(
                        new
                        {
                            Id_Swimmer = 1,
                            Birth_Date = new DateTime(2019, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 2,
                            Name = "Maria Guerrero",
                            Phone_Number = "685214378",
                            SwimmerUser = "maria.guerrero@gmail.com"
                        },
                        new
                        {
                            Id_Swimmer = 2,
                            Birth_Date = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 1,
                            Name = "Raul Hernandez",
                            Phone_Number = "693251487",
                            SwimmerUser = "raul.hernandez@gmail.com"
                        },
                        new
                        {
                            Id_Swimmer = 3,
                            Birth_Date = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 1,
                            Name = "Martin Sanchez",
                            Phone_Number = "602145318",
                            SwimmerUser = "martin.sanchez@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Course", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId_Coach");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Enrollment", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId_Course");

                    b.HasOne("Smith_Swimming_School.Models.Group", "Grouping")
                        .WithMany()
                        .HasForeignKey("GroupingId_Grouping");

                    b.HasOne("Smith_Swimming_School.Models.Swimmer", "Swimmer")
                        .WithMany()
                        .HasForeignKey("SwimmerId_Swimmer");

                    b.Navigation("Course");

                    b.Navigation("Grouping");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Report", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId_Enrollment");

                    b.Navigation("Enrollment");
                });
#pragma warning restore 612, 618
        }
    }
}
