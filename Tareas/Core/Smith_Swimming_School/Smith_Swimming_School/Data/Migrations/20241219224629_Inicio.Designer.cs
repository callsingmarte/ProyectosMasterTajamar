// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smith_Swimming_School.Data;

#nullable disable

namespace Smith_Swimming_School.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241219224629_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0fae9880-33b1-4ab0-9497-d7bb1fda8746",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "39942655-b610-46e1-840e-1fbc34fd5317",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "25973d9b-4ec1-4cb9-9b8a-6ab650210cd9",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = "32eaeec6-155f-4309-ba9c-0db45a01c857",
                            Name = "Swimmer",
                            NormalizedName = "SWIMMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "87d800a8-427e-4d6d-b28d-c9e6eb3cbae6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1df788a-aa46-49eb-ab4a-e409ea3befd1",
                            Email = "admin@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@3S.COM",
                            NormalizedUserName = "ADMIN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA2YjuQkG7+QoQTQmLsCUHcG8ZNvnVskhj8z/ur3Y8hZAnCwD+uDWza89BrKcw8IWQ==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6304fd23-6b1d-471b-8ccb-8a2ef4067ca1",
                            TwoFactorEnabled = false,
                            UserName = "admin@3s.com"
                        },
                        new
                        {
                            Id = "5363a831-0116-4509-9e1d-968442431031",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfa660e9-c96d-4ccd-8934-67ec7ec4aa60",
                            Email = "lucia.sanchiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@GMAIL.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJg7aWYlQHpdiSJGOGN6WLJty70F083cBrXPiMlS/Q4pa32auhR32dy7YfAoUI9aTQ==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "570ccada-5d99-458b-8952-3258fbee59fb",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz@gmail.com"
                        },
                        new
                        {
                            Id = "b50f0011-ecfa-42de-96b1-2a9f268c9e5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "704f133e-2cbf-46f4-96d8-6c7156405e0d",
                            Email = "paco.montoro@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@3S.COM",
                            NormalizedUserName = "PACO.MONTORO@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHPAHHR37icx0+C6uKHNA8iqyuyuolMkPojImnociYyKFIIBFa7xweEDQKl4xQ420g==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a43b88bb-feda-4eaf-91cc-a716320eb9c0",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro@3s.com"
                        },
                        new
                        {
                            Id = "f1e6d15a-1f1e-4df1-94ce-f28d9abb2ebb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2645d4df-ec5a-42f1-b68f-38c91f37829f",
                            Email = "marta.alonso@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTA.ALONSO@3S.COM",
                            NormalizedUserName = "MARTA.ALONSO@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEl8qd7ZHIdu3KV1MryJy3sKL4qyk8/2NAf30VeEdE6hZR60BXMRO6jd+v5HXXw4iQ==",
                            PhoneNumber = "632541278",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f07ccb1-0447-45de-ad90-71b3b364d1d9",
                            TwoFactorEnabled = false,
                            UserName = "marta.alonso@3s.com"
                        },
                        new
                        {
                            Id = "302cd363-98b2-4644-bc6b-b6c7860b1c32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da06ec36-8711-4779-a240-a467e794874b",
                            Email = "maria.guerrero@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GUERRERO@GMAIL.COM",
                            NormalizedUserName = "MARIA.GUERRERO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUYHlck5xgEDTe4kQmO6GCYyKIe8op0EMvkEMUam80ynYDx7XCPZYyeQY3X8CBXcg==",
                            PhoneNumber = "685214378",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd4c369e-7ada-4575-afed-609e9bc59626",
                            TwoFactorEnabled = false,
                            UserName = "maria.guerrero@gmail.com"
                        },
                        new
                        {
                            Id = "3e80a641-a193-4ab9-8310-6e220f2c3b5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02d761ec-f37e-4e12-a7f9-2c0058c95ad0",
                            Email = "raul.hernandez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAUL.HERNANDEZ@GMAIL.COM",
                            NormalizedUserName = "RAUL.HERNANDEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0WoNvLIPnu8eY3O9GHiWeadBOVcvHI1v0ZB2EcVmbW0ThUS9lld3SuBIfwHZ10Gw==",
                            PhoneNumber = "693251487",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "825160be-4e17-4ba2-8e18-9f3d9ddb971e",
                            TwoFactorEnabled = false,
                            UserName = "raul.hernandez@gmail.com"
                        },
                        new
                        {
                            Id = "05e475e9-a02f-4241-b274-eeae127c2125",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb3e1854-0d73-46ae-bba5-6976802ae5e7",
                            Email = "martin.sanchez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN.SANCHEZ@GMAIL.COM",
                            NormalizedUserName = "MARTIN.SANCHEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOw2RzDkBRucDr99QBd1BibqoihJkp+2nf0pnp4W1geWEV5rchrKUT1t0GFdx22Uw==",
                            PhoneNumber = "602145318",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16bea7ba-4454-429f-8731-5cc55518b218",
                            TwoFactorEnabled = false,
                            UserName = "martin.sanchez@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "87d800a8-427e-4d6d-b28d-c9e6eb3cbae6",
                            RoleId = "0fae9880-33b1-4ab0-9497-d7bb1fda8746"
                        },
                        new
                        {
                            UserId = "5363a831-0116-4509-9e1d-968442431031",
                            RoleId = "25973d9b-4ec1-4cb9-9b8a-6ab650210cd9"
                        },
                        new
                        {
                            UserId = "b50f0011-ecfa-42de-96b1-2a9f268c9e5f",
                            RoleId = "39942655-b610-46e1-840e-1fbc34fd5317"
                        },
                        new
                        {
                            UserId = "f1e6d15a-1f1e-4df1-94ce-f28d9abb2ebb",
                            RoleId = "39942655-b610-46e1-840e-1fbc34fd5317"
                        },
                        new
                        {
                            UserId = "302cd363-98b2-4644-bc6b-b6c7860b1c32",
                            RoleId = "32eaeec6-155f-4309-ba9c-0db45a01c857"
                        },
                        new
                        {
                            UserId = "3e80a641-a193-4ab9-8310-6e220f2c3b5d",
                            RoleId = "32eaeec6-155f-4309-ba9c-0db45a01c857"
                        },
                        new
                        {
                            UserId = "05e475e9-a02f-4241-b274-eeae127c2125",
                            RoleId = "32eaeec6-155f-4309-ba9c-0db45a01c857"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Coach", b =>
                {
                    b.Property<int>("Id_Coach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Coach"));

                    b.Property<string>("CoachUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Coach");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id_Coach = 1,
                            CoachUser = "paco.montoro@3s.com",
                            Name = "Paco Montoro",
                            Phone_Number = "632514785"
                        },
                        new
                        {
                            Id_Coach = 2,
                            CoachUser = "marta.alonso@3s.com",
                            Name = "Marta Alonso",
                            Phone_Number = "632541278"
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Course", b =>
                {
                    b.Property<int>("Id_Course")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Course"));

                    b.Property<int>("Id_Coach")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPlaces")
                        .HasColumnType("int");

                    b.HasKey("Id_Course");

                    b.HasIndex("Id_Coach");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id_Course = 1,
                            Id_Coach = 2,
                            Title = "Swim Training for Endurance",
                            TotalPlaces = 15
                        },
                        new
                        {
                            Id_Course = 2,
                            Id_Coach = 1,
                            Title = "Breaststroke Fundamentals",
                            TotalPlaces = 10
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Enrollment", b =>
                {
                    b.Property<int>("Id_Enrollment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Enrollment"));

                    b.Property<int>("Id_Course")
                        .HasColumnType("int");

                    b.Property<int?>("Id_Grouping")
                        .HasColumnType("int");

                    b.Property<int?>("Id_Swimmer")
                        .HasColumnType("int");

                    b.HasKey("Id_Enrollment");

                    b.HasIndex("Id_Course");

                    b.HasIndex("Id_Grouping");

                    b.HasIndex("Id_Swimmer");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id_Enrollment = 1,
                            Id_Course = 2,
                            Id_Grouping = 1,
                            Id_Swimmer = 1
                        },
                        new
                        {
                            Id_Enrollment = 2,
                            Id_Course = 1,
                            Id_Grouping = 2,
                            Id_Swimmer = 3
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Group", b =>
                {
                    b.Property<int>("Id_Grouping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Grouping"));

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Places")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Grouping");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id_Grouping = 1,
                            End_Date = new DateTime(2025, 1, 31, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 1,
                            Name = "Young Swimmer fundamentals",
                            Places = 5,
                            Start_Date = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Grouping = 2,
                            End_Date = new DateTime(2024, 1, 30, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Level = 7,
                            Name = "Adult Learning for endurance",
                            Places = 15,
                            Start_Date = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Grouping = 3,
                            End_Date = new DateTime(2024, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 3,
                            Name = "Young Swimmer lv3 fundamentals",
                            Places = 5,
                            Start_Date = new DateTime(2024, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Report", b =>
                {
                    b.Property<int>("Id_Report")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Report"));

                    b.Property<int>("Id_Enrollment")
                        .HasColumnType("int");

                    b.Property<string>("ProgressReport")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Report");

                    b.HasIndex("Id_Enrollment");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id_Report = 1,
                            Id_Enrollment = 2,
                            ProgressReport = "El alumno progresa adecuadamente"
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Swimmer", b =>
                {
                    b.Property<int>("Id_Swimmer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Swimmer"));

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwimmerUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Swimmer");

                    b.ToTable("Swimmers");

                    b.HasData(
                        new
                        {
                            Id_Swimmer = 1,
                            Birth_Date = new DateTime(2019, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 2,
                            Name = "Maria Guerrero",
                            Phone_Number = "685214378",
                            SwimmerUser = "maria.guerrero@gmail.com"
                        },
                        new
                        {
                            Id_Swimmer = 2,
                            Birth_Date = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 1,
                            Name = "Raul Hernandez",
                            Phone_Number = "693251487",
                            SwimmerUser = "raul.hernandez@gmail.com"
                        },
                        new
                        {
                            Id_Swimmer = 3,
                            Birth_Date = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 1,
                            Name = "Martin Sanchez",
                            Phone_Number = "602145318",
                            SwimmerUser = "martin.sanchez@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Course", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("Id_Coach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Enrollment", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("Id_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Smith_Swimming_School.Models.Group", "Grouping")
                        .WithMany()
                        .HasForeignKey("Id_Grouping");

                    b.HasOne("Smith_Swimming_School.Models.Swimmer", "Swimmer")
                        .WithMany()
                        .HasForeignKey("Id_Swimmer");

                    b.Navigation("Course");

                    b.Navigation("Grouping");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Report", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("Id_Enrollment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");
                });
#pragma warning restore 612, 618
        }
    }
}
