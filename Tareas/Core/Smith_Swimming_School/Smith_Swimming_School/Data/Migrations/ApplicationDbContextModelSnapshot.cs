// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smith_Swimming_School.Data;

#nullable disable

namespace Smith_Swimming_School.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97c10d82-6f23-45d8-b507-88b605697185",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "822e8f95-1892-4f87-b0d4-c8d0fce8dbad",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "bd8ec400-0f70-47e3-a519-c8b91fa544f5",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = "f0c80341-a483-4f8e-8e0a-8938ebf36b47",
                            Name = "Swimmer",
                            NormalizedName = "SWIMMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "357d0739-17eb-4db2-988d-ee1a6e50987d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3ef028-50ce-4515-8fc2-a0b251b002f6",
                            Email = "admin@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@3S.COM",
                            NormalizedUserName = "ADMIN@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK/shcbWUOaLfkv8xIhYXh2O0MNVVwAtgFAkmp50S4V9w7qCQixUY9LBml8Ty9jx6g==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6c55217-b3f7-44c5-8ec3-238e515d3475",
                            TwoFactorEnabled = false,
                            UserName = "admin@3s.com"
                        },
                        new
                        {
                            Id = "61433e78-2efb-42ed-a220-22ba8439df70",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5741e054-f254-494b-b1dd-d7f167d4f534",
                            Email = "lucia.sanchiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@GMAIL.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+oZqjGJsTjrMTome0w0AywhImMN5ZrU/cqbm5B9aoAZ2SDdSkk3u9ATyaAu098jw==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "365ad339-4c5c-4016-add7-2124362da625",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz@gmail.com"
                        },
                        new
                        {
                            Id = "c5b85380-b13a-41bc-9d09-33e0257ed25e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0069eff1-d16e-4ce4-9425-60daa5313b6f",
                            Email = "paco.montoro@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@3S.COM",
                            NormalizedUserName = "PACO.MONTORO@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnaK7egTQ2qESXvw0Q1420uNSSq8g6QouhccjyLiSLQtZe+W3GBfjSIkQTObtrkTw==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e393a92-2507-4067-94aa-429723bac556",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro@3s.com"
                        },
                        new
                        {
                            Id = "d32ffd42-0478-4e4e-abb8-136150cdb68c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63b9cc99-d9df-44af-9e0c-ad023f7fa326",
                            Email = "marta.alonso@3s.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTA.ALONSO@3S.COM",
                            NormalizedUserName = "MARTA.ALONSO@3S.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELey9qFJTh5YXml6d14wg2uhW24RSi+JOSiO2LPOAqjTfuk+zUDvcsCATKVcOYN/yw==",
                            PhoneNumber = "632541278",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc7caaff-f797-4d90-afce-2c7f85519fe1",
                            TwoFactorEnabled = false,
                            UserName = "marta.alonso@3s.com"
                        },
                        new
                        {
                            Id = "ec100f8c-ca2c-4a56-9646-7d0dfc3dfc25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92fcc023-574f-4f30-bad3-1f7b9d2e380c",
                            Email = "maria.guerrero@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GUERRERO@GMAIL.COM",
                            NormalizedUserName = "MARIA.GUERRERO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGKjgKOGmtA2pm3sUznUuZDjfVMxJPo0Um8xJs8ACZyvB9NxSw1pa9/RrH2AFgjlyA==",
                            PhoneNumber = "685214378",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24b17937-8517-41f2-8d21-8affe8da3eef",
                            TwoFactorEnabled = false,
                            UserName = "maria.guerrero@gmail.com"
                        },
                        new
                        {
                            Id = "56b6dd7e-30be-4593-9437-ee27c0887d4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2737113a-2ae6-4541-ad60-3c3cdaf670ab",
                            Email = "raul.hernandez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAUL.HERNANDEZ@GMAIL.COM",
                            NormalizedUserName = "RAUL.HERNANDEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKKqAS/3tFGLb/H9ANiNm2jFBIcnLDdg1lEYMhpYN6rithqoxmqRgjPrmoU0emkROA==",
                            PhoneNumber = "693251487",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e1cd847-1b09-4397-a1f2-e43c3992a885",
                            TwoFactorEnabled = false,
                            UserName = "raul.hernandez@gmail.com"
                        },
                        new
                        {
                            Id = "04b75633-aa57-4d5d-bc37-63eb5b8d6b38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfc3908b-5a84-4ec0-9d7f-b38b139521de",
                            Email = "martin.sanchez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN.SANCHEZ@GMAIL.COM",
                            NormalizedUserName = "MARTIN.SANCHEZ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFLdxaZJScSZjwVYShkMHMmms9Zea1TcjPlZj55Lys+zz+awzSVjlnZUWrJXCc3yhw==",
                            PhoneNumber = "602145318",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbd3807e-c8f9-4fd6-a9c9-cd2d0591f7a7",
                            TwoFactorEnabled = false,
                            UserName = "martin.sanchez@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "357d0739-17eb-4db2-988d-ee1a6e50987d",
                            RoleId = "97c10d82-6f23-45d8-b507-88b605697185"
                        },
                        new
                        {
                            UserId = "61433e78-2efb-42ed-a220-22ba8439df70",
                            RoleId = "bd8ec400-0f70-47e3-a519-c8b91fa544f5"
                        },
                        new
                        {
                            UserId = "c5b85380-b13a-41bc-9d09-33e0257ed25e",
                            RoleId = "822e8f95-1892-4f87-b0d4-c8d0fce8dbad"
                        },
                        new
                        {
                            UserId = "d32ffd42-0478-4e4e-abb8-136150cdb68c",
                            RoleId = "822e8f95-1892-4f87-b0d4-c8d0fce8dbad"
                        },
                        new
                        {
                            UserId = "ec100f8c-ca2c-4a56-9646-7d0dfc3dfc25",
                            RoleId = "f0c80341-a483-4f8e-8e0a-8938ebf36b47"
                        },
                        new
                        {
                            UserId = "56b6dd7e-30be-4593-9437-ee27c0887d4a",
                            RoleId = "f0c80341-a483-4f8e-8e0a-8938ebf36b47"
                        },
                        new
                        {
                            UserId = "04b75633-aa57-4d5d-bc37-63eb5b8d6b38",
                            RoleId = "f0c80341-a483-4f8e-8e0a-8938ebf36b47"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Coach", b =>
                {
                    b.Property<int>("Id_Coach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Coach"));

                    b.Property<string>("CoachUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Coach");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id_Coach = 1,
                            CoachUser = "paco.montoro@3s.com",
                            Name = "Paco Montoro",
                            Phone_Number = "632514785"
                        },
                        new
                        {
                            Id_Coach = 2,
                            CoachUser = "marta.alonso@3s.com",
                            Name = "Marta Alonso",
                            Phone_Number = "632541278"
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Course", b =>
                {
                    b.Property<int>("Id_Course")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Course"));

                    b.Property<int?>("CoachId_Coach")
                        .HasColumnType("int");

                    b.Property<int>("Id_Coach")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPlaces")
                        .HasColumnType("int");

                    b.HasKey("Id_Course");

                    b.HasIndex("CoachId_Coach");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id_Course = 1,
                            Id_Coach = 2,
                            Title = "Swim Training for Endurance",
                            TotalPlaces = 15
                        },
                        new
                        {
                            Id_Course = 2,
                            Id_Coach = 1,
                            Title = "Breaststroke Fundamentals",
                            TotalPlaces = 10
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Enrollment", b =>
                {
                    b.Property<int>("Id_Enrollment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Enrollment"));

                    b.Property<int?>("CourseId_Course")
                        .HasColumnType("int");

                    b.Property<int?>("GroupingId_Grouping")
                        .HasColumnType("int");

                    b.Property<int>("Id_Course")
                        .HasColumnType("int");

                    b.Property<int>("Id_Grouping")
                        .HasColumnType("int");

                    b.Property<int>("Id_Swimmer")
                        .HasColumnType("int");

                    b.Property<int?>("SwimmerId_Swimmer")
                        .HasColumnType("int");

                    b.HasKey("Id_Enrollment");

                    b.HasIndex("CourseId_Course");

                    b.HasIndex("GroupingId_Grouping");

                    b.HasIndex("SwimmerId_Swimmer");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id_Enrollment = 1,
                            Id_Course = 2,
                            Id_Grouping = 1,
                            Id_Swimmer = 1
                        },
                        new
                        {
                            Id_Enrollment = 2,
                            Id_Course = 1,
                            Id_Grouping = 2,
                            Id_Swimmer = 3
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Group", b =>
                {
                    b.Property<int>("Id_Grouping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Grouping"));

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Places")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Grouping");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id_Grouping = 1,
                            End_Date = new DateTime(2025, 1, 31, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 1,
                            Name = "Young Swimmer fundamentals",
                            Places = 5,
                            Start_Date = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Grouping = 2,
                            End_Date = new DateTime(2024, 1, 30, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Level = 7,
                            Name = "Adult Learning for endurance",
                            Places = 15,
                            Start_Date = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id_Grouping = 3,
                            End_Date = new DateTime(2024, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = 3,
                            Name = "Young Swimmer lv3 fundamentals",
                            Places = 5,
                            Start_Date = new DateTime(2024, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Report", b =>
                {
                    b.Property<int>("Id_Report")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Report"));

                    b.Property<int?>("EnrollmentId_Enrollment")
                        .HasColumnType("int");

                    b.Property<int>("Id_Enrollment")
                        .HasColumnType("int");

                    b.Property<string>("ProgressReport")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Report");

                    b.HasIndex("EnrollmentId_Enrollment");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id_Report = 1,
                            Id_Enrollment = 2,
                            ProgressReport = "El alumno progresa adecuadamente"
                        });
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Swimmer", b =>
                {
                    b.Property<int>("Id_Swimmer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Swimmer"));

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwimmerUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Swimmer");

                    b.ToTable("Swimmers");

                    b.HasData(
                        new
                        {
                            Id_Swimmer = 1,
                            Birth_Date = new DateTime(2019, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 2,
                            Name = "Maria Guerrero",
                            Phone_Number = "685214378",
                            SwimmerUser = "maria.guerrero@gmail.com"
                        },
                        new
                        {
                            Id_Swimmer = 2,
                            Birth_Date = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 1,
                            Name = "Raul Hernandez",
                            Phone_Number = "693251487",
                            SwimmerUser = "raul.hernandez@gmail.com"
                        },
                        new
                        {
                            Id_Swimmer = 3,
                            Birth_Date = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 1,
                            Name = "Martin Sanchez",
                            Phone_Number = "602145318",
                            SwimmerUser = "martin.sanchez@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Course", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId_Coach");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Enrollment", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId_Course");

                    b.HasOne("Smith_Swimming_School.Models.Group", "Grouping")
                        .WithMany()
                        .HasForeignKey("GroupingId_Grouping");

                    b.HasOne("Smith_Swimming_School.Models.Swimmer", "Swimmer")
                        .WithMany()
                        .HasForeignKey("SwimmerId_Swimmer");

                    b.Navigation("Course");

                    b.Navigation("Grouping");

                    b.Navigation("Swimmer");
                });

            modelBuilder.Entity("Smith_Swimming_School.Models.Report", b =>
                {
                    b.HasOne("Smith_Swimming_School.Models.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId_Enrollment");

                    b.Navigation("Enrollment");
                });
#pragma warning restore 612, 618
        }
    }
}
