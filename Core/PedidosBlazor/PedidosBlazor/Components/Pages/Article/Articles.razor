@page "/articles"
@using PedidosBlazor.Models
@using PedidosBlazor.Services
@using PedidosBlazor.Components.Pages.Shared
@inject IArticleService ArticleService
@inject IJSRuntime js
@rendermode InteractiveServer

<a class="btn btn-success mb-3" href="/add-article">Create New Article</a>

@if(articles == null)
{
    <p><em>Loading...</em></p>
}else if(articles.Count == 0)
{
    <p>No articles in database yet</p>
}
else
{
    <div class="article-grid">
        <div class="form-inline article-card">
            <label class="form-label" for="nombre-filtro">Busqueda:</label>
            <input type="text" class="form-control mb-2 mr-sm-2" 
            @bind="nombreArticleFiltro" placeholder="Search by name" />
            <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Buscar">Search</button>
            <button type="button" class="btn btn-warning mb-2" @onclick="Limpiar">Clean</button>
        </div>
        <table class="table-hover article-card">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var article in articles)
                {
                    <TableRow Item="article" RowContent="@RowContentForArticle" Actions="@ActionsForArticle" />
                }
            </tbody>
        </table>
        <Paginador TotalItems="@totalItems" ItemsPerPage="@recordsPerPage"
                   CurrentPage="@currentPage" Radius="3"
                   SelectedPage="OnSelectedPage" />
    </div>
}

@code {
    private List<Article>? articles;
    private string nombreArticleFiltro = string.Empty;
    private int currentPage = 1; // Página actual
    private int totalItems; // Total de artículos
    private int recordsPerPage = 4; // Registros por página

    protected override async Task OnInitializedAsync()
    {
        // Cargar total de artículos y la primera página
        totalItems = await ArticleService.GetTotalArticlesCountAsync();
        await LoadArticles(currentPage, recordsPerPage);
    }

    private async Task LoadArticles(int page, int quantityPerPage)
    {
        // Cargar artículos para la página actual
        articles = await ArticleService.GetArticlesAsync(page, quantityPerPage);
    }

    private async Task OnSelectedPage(int page)
    {
        // Actualizar la página actual y recargar los artículos
        currentPage = page;
        await LoadArticles(page, recordsPerPage);
    }

    private async Task DeleteArticle(int idArticle)
    {
        var articleSelected = articles!.First(x => x.ID == idArticle);
        string confirmMessage = $"Do you really want to delete the article {articleSelected.Name}?";

        bool result = await js.InvokeAsync<bool>("window.confirm", confirmMessage);

        if (result)
        {
            await ArticleService.DeleteArticleAsync(idArticle);
            // Actualizar total de artículos y recargar la página actual
            totalItems = await ArticleService.GetTotalArticlesCountAsync();
            await LoadArticles(currentPage, recordsPerPage);
        }
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(nombreArticleFiltro))
        {
            // Recargar artículos sin filtro
            await LoadArticles(currentPage, recordsPerPage);
        }
        else
        {
            // Filtrar artículos localmente
            articles = await ArticleService.GetArticlesAsync();
            articles = articles.Where(a => a.Name!.Contains(nombreArticleFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task Limpiar()
    {
        // Limpiar el filtro y recargar los artículos
        nombreArticleFiltro = string.Empty;
        await LoadArticles(currentPage, recordsPerPage);
    }

    private RenderFragment<object> RowContentForArticle => item => __builder =>
    {
    var article = item as Article;
    if (article != null)
    {
        __builder.OpenElement(0, "td");
        __builder.AddAttribute(1, "class", "text-center");
        __builder.AddContent(2, article.Name);
        __builder.CloseElement();

        __builder.OpenElement(3, "td");
        __builder.AddAttribute(4, "class", "text-center");
        __builder.AddContent(5, article.Category);
        __builder.CloseElement();

        __builder.OpenElement(6, "td");
        __builder.AddAttribute(7, "class", "text-center");
        __builder.AddContent(8, article.Price);
        __builder.CloseElement();
    }
    };
    private RenderFragment<object> ActionsForArticle => item => __builder =>
    {
        var article = item as Article;
        if (article != null)
        {
            __builder.OpenElement(0, "a");
            __builder.AddAttribute(1, "class", "btn btn-warning");
            __builder.AddAttribute(2, "href", $"Order/index-order/{article.ID}/{article.Name}");
            __builder.AddContent(3, "Orders");
            __builder.CloseElement();

            __builder.AddMarkupContent(4, " ");

            __builder.OpenElement(5, "a");
            __builder.AddAttribute(6, "class", "btn btn-success");
            __builder.AddAttribute(7, "href", $"edit-article/{article.ID}");
            __builder.AddContent(8, "Edit");
            __builder.CloseElement();

            __builder.AddMarkupContent(9, " ");

            __builder.OpenElement(10, "button");
            __builder.AddAttribute(11, "class", "btn btn-danger");
            __builder.AddAttribute(12, "onclick", EventCallback.Factory.Create(this, () => DeleteArticle(article.ID)));
            __builder.AddContent(13, "Delete");
            __builder.CloseElement();
        }
    };
}
