@page "/articles"
@using PedidosBlazor.Models
@using PedidosBlazor.Services
@using PedidosBlazor.Components.Pages.Shared
@inject IArticleService ArticleService
@inject IJSRuntime js
@rendermode InteractiveServer

<a class="btn btn-success mb-3" href="/add-article">Create New Article</a>

@if(articles == null)
{
    <p><em>Loading...</em></p>
}else if(articles.Count == 0)
{
    <p>No articles in database yet</p>
}
else
{
    <div class="article-grid">
        <div class="form-inline article-card">
            <label class="form-label" for="nombre-filtro">Busqueda:</label>
            <input type="text" class="form-control mb-2 mr-sm-2" 
            @bind="nombreArticleFiltro" placeholder="Search by name" />
            <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Buscar">Search</button>
            <button type="button" class="btn btn-warning mb-2" @onclick="Limpiar">Clean</button>
        </div>
        <table class="table-hover article-card">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var article in articles)
                {
                    <tr>
                        <td>@article.Name</td>
                        <td>@article.Category</td>
                        <td>@article.Price</td>
                        <td>
                            <a class="btn btn-warning" href="/Order/index-order/@article.ID/@article.Name">Orders</a>
                            <a class="btn btn-success" href="/edit-article/@article.ID">Edit</a>
                            <button class="btn btn-danger" @onclick="(() => DeleteArticle(article.ID))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <Paginador 
            TotalPagesQuantity="TotalPageQuantity" 
            CurrentPage="currentPage"
            Radius="2"
            SelectedPage="selectedPage"
        ></Paginador>
    </div>    
}

@code {
    private List<Article>? articles;

    private string nombreArticleFiltro = string.Empty;
    private int TotalPageQuantity;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        articles = await ArticleService.GetArticlesAsync();
    }

    async Task CargarArticles(int page = 1, int quantityPerPage = 4)
    {
        articles = await ArticleService.GetArticlesAsync(page, quantityPerPage);

    }

    async Task DeleteArticle(int idArticle)
    {
        var articleSeleccionado = articles!.First(x => x.ID == idArticle);
        string mensajeConfirmacion = $"¿Do you really want to delete article {articleSeleccionado.Name}";
        bool result = await js.InvokeAsync<bool>("window.confirm", mensajeConfirmacion);
        if (result)
        {
            await ArticleService.DeleteArticleAsync(idArticle);
            articles = await ArticleService.GetArticlesAsync();
        }
    }

    private async Task selectedPage(int page)
    {
        currentPage = page;
        await CargarArticles(page);
    }

    async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(nombreArticleFiltro))
        {
            articles = await ArticleService.GetArticlesAsync();
        }
        else
        {
            articles = await ArticleService.GetArticlesAsync();
            articles = articles.Where(a => a.Name!.Contains(nombreArticleFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    async Task Limpiar()
    {
        //Limpiar el texto del filtro
        nombreArticleFiltro = String.Empty;
        //Recargar todos los articulos
        articles = await ArticleService.GetArticlesAsync();        
    }
}
